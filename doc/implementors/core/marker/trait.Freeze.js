(function() {var implementors = {};
implementors["base16"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"base16/enum.EncConfig.html\" title=\"enum base16::EncConfig\">EncConfig</a>","synthetic":true,"types":["base16::EncConfig"]},{"text":"impl Freeze for <a class=\"enum\" href=\"base16/enum.DecodeError.html\" title=\"enum base16::DecodeError\">DecodeError</a>","synthetic":true,"types":["base16::DecodeError"]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"base64/display/struct.Base64Display.html\" title=\"struct base64::display::Base64Display\">Base64Display</a>&lt;'a&gt;","synthetic":true,"types":["base64::display::Base64Display"]},{"text":"impl Freeze for <a class=\"enum\" href=\"base64/enum.DecodeError.html\" title=\"enum base64::DecodeError\">DecodeError</a>","synthetic":true,"types":["base64::decode::DecodeError"]},{"text":"impl Freeze for <a class=\"enum\" href=\"base64/enum.CharacterSet.html\" title=\"enum base64::CharacterSet\">CharacterSet</a>","synthetic":true,"types":["base64::CharacterSet"]},{"text":"impl Freeze for <a class=\"struct\" href=\"base64/struct.Config.html\" title=\"struct base64::Config\">Config</a>","synthetic":true,"types":["base64::Config"]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Freeze for <a class=\"struct\" href=\"bitvec/array/struct.BitArray.html\" title=\"struct bitvec::array::BitArray\">BitArray</a>&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::array::BitArray"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"enum\" href=\"bitvec/domain/enum.BitDomain.html\" title=\"enum bitvec::domain::BitDomain\">BitDomain</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::domain::BitDomain"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"enum\" href=\"bitvec/domain/enum.BitDomainMut.html\" title=\"enum bitvec::domain::BitDomainMut\">BitDomainMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::domain::BitDomainMut"]},{"text":"impl&lt;'a, T&gt; Freeze for <a class=\"enum\" href=\"bitvec/domain/enum.Domain.html\" title=\"enum bitvec::domain::Domain\">Domain</a>&lt;'a, T&gt;","synthetic":true,"types":["bitvec::domain::Domain"]},{"text":"impl&lt;'a, T&gt; Freeze for <a class=\"enum\" href=\"bitvec/domain/enum.DomainMut.html\" title=\"enum bitvec::domain::DomainMut\">DomainMut</a>&lt;'a, T&gt;","synthetic":true,"types":["bitvec::domain::DomainMut"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"bitvec/index/struct.BitIdx.html\" title=\"struct bitvec::index::BitIdx\">BitIdx</a>&lt;M&gt;","synthetic":true,"types":["bitvec::index::BitIdx"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"bitvec/index/struct.BitTail.html\" title=\"struct bitvec::index::BitTail\">BitTail</a>&lt;M&gt;","synthetic":true,"types":["bitvec::index::BitTail"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"bitvec/index/struct.BitPos.html\" title=\"struct bitvec::index::BitPos\">BitPos</a>&lt;M&gt;","synthetic":true,"types":["bitvec::index::BitPos"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"bitvec/index/struct.BitSel.html\" title=\"struct bitvec::index::BitSel\">BitSel</a>&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::index::BitSel"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"bitvec/index/struct.BitMask.html\" title=\"struct bitvec::index::BitMask\">BitMask</a>&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::index::BitMask"]},{"text":"impl Freeze for <a class=\"struct\" href=\"bitvec/order/struct.Msb0.html\" title=\"struct bitvec::order::Msb0\">Msb0</a>","synthetic":true,"types":["bitvec::order::Msb0"]},{"text":"impl Freeze for <a class=\"struct\" href=\"bitvec/order/struct.Lsb0.html\" title=\"struct bitvec::order::Lsb0\">Lsb0</a>","synthetic":true,"types":["bitvec::order::Lsb0"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.Iter.html\" title=\"struct bitvec::slice::Iter\">Iter</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::Iter"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.IterMut.html\" title=\"struct bitvec::slice::IterMut\">IterMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::IterMut"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.Windows.html\" title=\"struct bitvec::slice::Windows\">Windows</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::Windows"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.Chunks.html\" title=\"struct bitvec::slice::Chunks\">Chunks</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::Chunks"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.ChunksMut.html\" title=\"struct bitvec::slice::ChunksMut\">ChunksMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::ChunksMut"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.ChunksExact.html\" title=\"struct bitvec::slice::ChunksExact\">ChunksExact</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::ChunksExact"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.ChunksExactMut.html\" title=\"struct bitvec::slice::ChunksExactMut\">ChunksExactMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::ChunksExactMut"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RChunks.html\" title=\"struct bitvec::slice::RChunks\">RChunks</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::RChunks"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RChunksMut.html\" title=\"struct bitvec::slice::RChunksMut\">RChunksMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::RChunksMut"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RChunksExact.html\" title=\"struct bitvec::slice::RChunksExact\">RChunksExact</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::RChunksExact"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RChunksExactMut.html\" title=\"struct bitvec::slice::RChunksExactMut\">RChunksExactMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::iter::RChunksExactMut"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.Split.html\" title=\"struct bitvec::slice::Split\">Split</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::Split"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.SplitMut.html\" title=\"struct bitvec::slice::SplitMut\">SplitMut</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::SplitMut"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RSplit.html\" title=\"struct bitvec::slice::RSplit\">RSplit</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::RSplit"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RSplitMut.html\" title=\"struct bitvec::slice::RSplitMut\">RSplitMut</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::RSplitMut"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.SplitN.html\" title=\"struct bitvec::slice::SplitN\">SplitN</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::SplitN"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.SplitNMut.html\" title=\"struct bitvec::slice::SplitNMut\">SplitNMut</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::SplitNMut"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RSplitN.html\" title=\"struct bitvec::slice::RSplitN\">RSplitN</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::RSplitN"]},{"text":"impl&lt;'a, O, T, P&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.RSplitNMut.html\" title=\"struct bitvec::slice::RSplitNMut\">RSplitNMut</a>&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":["bitvec::slice::iter::RSplitNMut"]},{"text":"impl&lt;'a, O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.BitMut.html\" title=\"struct bitvec::slice::BitMut\">BitMut</a>&lt;'a, O, T&gt;","synthetic":true,"types":["bitvec::slice::proxy::BitMut"]},{"text":"impl&lt;O, T&gt; Freeze for <a class=\"struct\" href=\"bitvec/slice/struct.BitSlice.html\" title=\"struct bitvec::slice::BitSlice\">BitSlice</a>&lt;O, T&gt;","synthetic":true,"types":["bitvec::slice::BitSlice"]}];
implementors["blake2"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"blake2/struct.VarBlake2b.html\" title=\"struct blake2::VarBlake2b\">VarBlake2b</a>","synthetic":true,"types":["blake2::blake2b::VarBlake2b"]},{"text":"impl Freeze for <a class=\"struct\" href=\"blake2/struct.Blake2b.html\" title=\"struct blake2::Blake2b\">Blake2b</a>","synthetic":true,"types":["blake2::blake2b::Blake2b"]},{"text":"impl Freeze for <a class=\"struct\" href=\"blake2/struct.VarBlake2s.html\" title=\"struct blake2::VarBlake2s\">VarBlake2s</a>","synthetic":true,"types":["blake2::blake2s::VarBlake2s"]},{"text":"impl Freeze for <a class=\"struct\" href=\"blake2/struct.Blake2s.html\" title=\"struct blake2::Blake2s\">Blake2s</a>","synthetic":true,"types":["blake2::blake2s::Blake2s"]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for <a class=\"struct\" href=\"block_buffer/struct.BlockBuffer.html\" title=\"struct block_buffer::BlockBuffer\">BlockBuffer</a>&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["block_buffer::BlockBuffer"]}];
implementors["byteorder"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"byteorder/enum.BigEndian.html\" title=\"enum byteorder::BigEndian\">BigEndian</a>","synthetic":true,"types":["byteorder::BigEndian"]},{"text":"impl Freeze for <a class=\"enum\" href=\"byteorder/enum.LittleEndian.html\" title=\"enum byteorder::LittleEndian\">LittleEndian</a>","synthetic":true,"types":["byteorder::LittleEndian"]}];
implementors["casper_types"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.AccessRights.html\" title=\"struct casper_types::AccessRights\">AccessRights</a>","synthetic":true,"types":["casper_types::access_rights::AccessRights"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.GrantedAccess.html\" title=\"enum casper_types::GrantedAccess\">GrantedAccess</a>","synthetic":true,"types":["casper_types::access_rights::GrantedAccess"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContextAccessRights.html\" title=\"struct casper_types::ContextAccessRights\">ContextAccessRights</a>","synthetic":true,"types":["casper_types::access_rights::ContextAccessRights"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/struct.AccountHash.html\" title=\"struct casper_types::account::AccountHash\">AccountHash</a>","synthetic":true,"types":["casper_types::account::account_hash::AccountHash"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/action_thresholds/struct.ActionThresholds.html\" title=\"struct casper_types::account::action_thresholds::ActionThresholds\">ActionThresholds</a>","synthetic":true,"types":["casper_types::account::action_thresholds::ActionThresholds"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.ActionType.html\" title=\"enum casper_types::account::ActionType\">ActionType</a>","synthetic":true,"types":["casper_types::account::action_type::ActionType"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/associated_keys/struct.AssociatedKeys.html\" title=\"struct casper_types::account::associated_keys::AssociatedKeys\">AssociatedKeys</a>","synthetic":true,"types":["casper_types::account::associated_keys::AssociatedKeys"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.FromStrError.html\" title=\"enum casper_types::account::FromStrError\">FromStrError</a>","synthetic":true,"types":["casper_types::account::error::FromStrError"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.SetThresholdFailure.html\" title=\"enum casper_types::account::SetThresholdFailure\">SetThresholdFailure</a>","synthetic":true,"types":["casper_types::account::error::SetThresholdFailure"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/struct.TryFromSliceForAccountHashError.html\" title=\"struct casper_types::account::TryFromSliceForAccountHashError\">TryFromSliceForAccountHashError</a>","synthetic":true,"types":["casper_types::account::error::TryFromSliceForAccountHashError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/struct.Weight.html\" title=\"struct casper_types::account::Weight\">Weight</a>","synthetic":true,"types":["casper_types::account::weight::Weight"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/account/struct.Account.html\" title=\"struct casper_types::account::Account\">Account</a>","synthetic":true,"types":["casper_types::account::Account"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.AddKeyFailure.html\" title=\"enum casper_types::account::AddKeyFailure\">AddKeyFailure</a>","synthetic":true,"types":["casper_types::account::AddKeyFailure"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.RemoveKeyFailure.html\" title=\"enum casper_types::account::RemoveKeyFailure\">RemoveKeyFailure</a>","synthetic":true,"types":["casper_types::account::RemoveKeyFailure"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/account/enum.UpdateKeyFailure.html\" title=\"enum casper_types::account::UpdateKeyFailure\">UpdateKeyFailure</a>","synthetic":true,"types":["casper_types::account::UpdateKeyFailure"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.ApiError.html\" title=\"enum casper_types::ApiError\">ApiError</a>","synthetic":true,"types":["casper_types::api_error::ApiError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.BlockTime.html\" title=\"struct casper_types::BlockTime\">BlockTime</a>","synthetic":true,"types":["casper_types::block_time::BlockTime"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/bytesrepr/struct.Bytes.html\" title=\"struct casper_types::bytesrepr::Bytes\">Bytes</a>","synthetic":true,"types":["casper_types::bytesrepr::bytes::Bytes"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/bytesrepr/enum.Error.html\" title=\"enum casper_types::bytesrepr::Error\">Error</a>","synthetic":true,"types":["casper_types::bytesrepr::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.CLType.html\" title=\"enum casper_types::CLType\">CLType</a>","synthetic":true,"types":["casper_types::cl_type::CLType"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.CLTypeMismatch.html\" title=\"struct casper_types::CLTypeMismatch\">CLTypeMismatch</a>","synthetic":true,"types":["casper_types::cl_value::CLTypeMismatch"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.CLValueError.html\" title=\"enum casper_types::CLValueError\">CLValueError</a>","synthetic":true,"types":["casper_types::cl_value::CLValueError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.CLValue.html\" title=\"struct casper_types::CLValue\">CLValue</a>","synthetic":true,"types":["casper_types::cl_value::CLValue"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractWasmHash.html\" title=\"struct casper_types::ContractWasmHash\">ContractWasmHash</a>","synthetic":true,"types":["casper_types::contract_wasm::ContractWasmHash"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractWasm.html\" title=\"struct casper_types::ContractWasm\">ContractWasm</a>","synthetic":true,"types":["casper_types::contract_wasm::ContractWasm"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/contracts/enum.Error.html\" title=\"enum casper_types::contracts::Error\">Error</a>","synthetic":true,"types":["casper_types::contracts::Error"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/contracts/struct.TryFromSliceForContractHashError.html\" title=\"struct casper_types::contracts::TryFromSliceForContractHashError\">TryFromSliceForContractHashError</a>","synthetic":true,"types":["casper_types::contracts::TryFromSliceForContractHashError"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/contracts/enum.FromStrError.html\" title=\"enum casper_types::contracts::FromStrError\">FromStrError</a>","synthetic":true,"types":["casper_types::contracts::FromStrError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Group.html\" title=\"struct casper_types::Group\">Group</a>","synthetic":true,"types":["casper_types::contracts::Group"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractVersionKey.html\" title=\"struct casper_types::ContractVersionKey\">ContractVersionKey</a>","synthetic":true,"types":["casper_types::contracts::ContractVersionKey"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractHash.html\" title=\"struct casper_types::ContractHash\">ContractHash</a>","synthetic":true,"types":["casper_types::contracts::ContractHash"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractPackageHash.html\" title=\"struct casper_types::ContractPackageHash\">ContractPackageHash</a>","synthetic":true,"types":["casper_types::contracts::ContractPackageHash"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/contracts/enum.ContractPackageStatus.html\" title=\"enum casper_types::contracts::ContractPackageStatus\">ContractPackageStatus</a>","synthetic":true,"types":["casper_types::contracts::ContractPackageStatus"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ContractPackage.html\" title=\"struct casper_types::ContractPackage\">ContractPackage</a>","synthetic":true,"types":["casper_types::contracts::ContractPackage"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.EntryPoints.html\" title=\"struct casper_types::EntryPoints\">EntryPoints</a>","synthetic":true,"types":["casper_types::contracts::EntryPoints"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Contract.html\" title=\"struct casper_types::Contract\">Contract</a>","synthetic":true,"types":["casper_types::contracts::Contract"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.EntryPointType.html\" title=\"enum casper_types::EntryPointType\">EntryPointType</a>","synthetic":true,"types":["casper_types::contracts::EntryPointType"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.EntryPoint.html\" title=\"struct casper_types::EntryPoint\">EntryPoint</a>","synthetic":true,"types":["casper_types::contracts::EntryPoint"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.EntryPointAccess.html\" title=\"enum casper_types::EntryPointAccess\">EntryPointAccess</a>","synthetic":true,"types":["casper_types::contracts::EntryPointAccess"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Parameter.html\" title=\"struct casper_types::Parameter\">Parameter</a>","synthetic":true,"types":["casper_types::contracts::Parameter"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/crypto/enum.SecretKey.html\" title=\"enum casper_types::crypto::SecretKey\">SecretKey</a>","synthetic":true,"types":["casper_types::crypto::asymmetric_key::SecretKey"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/crypto/enum.PublicKey.html\" title=\"enum casper_types::crypto::PublicKey\">PublicKey</a>","synthetic":true,"types":["casper_types::crypto::asymmetric_key::PublicKey"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/crypto/enum.Signature.html\" title=\"enum casper_types::crypto::Signature\">Signature</a>","synthetic":true,"types":["casper_types::crypto::asymmetric_key::Signature"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/crypto/enum.Error.html\" title=\"enum casper_types::crypto::Error\">Error</a>","synthetic":true,"types":["casper_types::crypto::error::Error"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.DeployInfo.html\" title=\"struct casper_types::DeployInfo\">DeployInfo</a>","synthetic":true,"types":["casper_types::deploy_info::DeployInfo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.EraId.html\" title=\"struct casper_types::EraId\">EraId</a>","synthetic":true,"types":["casper_types::era_id::EraId"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.ExecutionResult.html\" title=\"enum casper_types::ExecutionResult\">ExecutionResult</a>","synthetic":true,"types":["casper_types::execution_result::ExecutionResult"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ExecutionEffect.html\" title=\"struct casper_types::ExecutionEffect\">ExecutionEffect</a>","synthetic":true,"types":["casper_types::execution_result::ExecutionEffect"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Operation.html\" title=\"struct casper_types::Operation\">Operation</a>","synthetic":true,"types":["casper_types::execution_result::Operation"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.OpKind.html\" title=\"enum casper_types::OpKind\">OpKind</a>","synthetic":true,"types":["casper_types::execution_result::OpKind"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.TransformEntry.html\" title=\"struct casper_types::TransformEntry\">TransformEntry</a>","synthetic":true,"types":["casper_types::execution_result::TransformEntry"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.Transform.html\" title=\"enum casper_types::Transform\">Transform</a>","synthetic":true,"types":["casper_types::execution_result::Transform"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Gas.html\" title=\"struct casper_types::Gas\">Gas</a>","synthetic":true,"types":["casper_types::gas::Gas"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.KeyTag.html\" title=\"enum casper_types::KeyTag\">KeyTag</a>","synthetic":true,"types":["casper_types::key::KeyTag"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.Key.html\" title=\"enum casper_types::Key\">Key</a>","synthetic":true,"types":["casper_types::key::Key"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.KeyFromStrError.html\" title=\"enum casper_types::KeyFromStrError\">FromStrError</a>","synthetic":true,"types":["casper_types::key::FromStrError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Motes.html\" title=\"struct casper_types::Motes\">Motes</a>","synthetic":true,"types":["casper_types::motes::Motes"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.NamedKey.html\" title=\"struct casper_types::NamedKey\">NamedKey</a>","synthetic":true,"types":["casper_types::named_key::NamedKey"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.Phase.html\" title=\"enum casper_types::Phase\">Phase</a>","synthetic":true,"types":["casper_types::phase::Phase"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.ProtocolVersion.html\" title=\"struct casper_types::ProtocolVersion\">ProtocolVersion</a>","synthetic":true,"types":["casper_types::protocol_version::ProtocolVersion"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.VersionCheckResult.html\" title=\"enum casper_types::VersionCheckResult\">VersionCheckResult</a>","synthetic":true,"types":["casper_types::protocol_version::VersionCheckResult"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.NamedArg.html\" title=\"struct casper_types::NamedArg\">NamedArg</a>","synthetic":true,"types":["casper_types::runtime_args::NamedArg"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.RuntimeArgs.html\" title=\"struct casper_types::RuntimeArgs\">RuntimeArgs</a>","synthetic":true,"types":["casper_types::runtime_args::RuntimeArgs"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.SemVer.html\" title=\"struct casper_types::SemVer\">SemVer</a>","synthetic":true,"types":["casper_types::semver::SemVer"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.ParseSemVerError.html\" title=\"enum casper_types::ParseSemVerError\">ParseSemVerError</a>","synthetic":true,"types":["casper_types::semver::ParseSemVerError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.StoredValueTypeMismatch.html\" title=\"struct casper_types::StoredValueTypeMismatch\">TypeMismatch</a>","synthetic":true,"types":["casper_types::stored_value::type_mismatch::TypeMismatch"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.StoredValue.html\" title=\"enum casper_types::StoredValue\">StoredValue</a>","synthetic":true,"types":["casper_types::stored_value::StoredValue"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/system/auction/struct.Bid.html\" title=\"struct casper_types::system::auction::Bid\">Bid</a>","synthetic":true,"types":["casper_types::system::auction::bid::Bid"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/system/auction/struct.Delegator.html\" title=\"struct casper_types::system::auction::Delegator\">Delegator</a>","synthetic":true,"types":["casper_types::system::auction::delegator::Delegator"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/auction/enum.SeigniorageAllocation.html\" title=\"enum casper_types::system::auction::SeigniorageAllocation\">SeigniorageAllocation</a>","synthetic":true,"types":["casper_types::system::auction::era_info::SeigniorageAllocation"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/system/auction/struct.EraInfo.html\" title=\"struct casper_types::system::auction::EraInfo\">EraInfo</a>","synthetic":true,"types":["casper_types::system::auction::era_info::EraInfo"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/auction/enum.Error.html\" title=\"enum casper_types::system::auction::Error\">Error</a>","synthetic":true,"types":["casper_types::system::auction::error::Error"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/system/auction/struct.SeigniorageRecipient.html\" title=\"struct casper_types::system::auction::SeigniorageRecipient\">SeigniorageRecipient</a>","synthetic":true,"types":["casper_types::system::auction::seigniorage_recipient::SeigniorageRecipient"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/system/auction/struct.UnbondingPurse.html\" title=\"struct casper_types::system::auction::UnbondingPurse\">UnbondingPurse</a>","synthetic":true,"types":["casper_types::system::auction::unbonding_purse::UnbondingPurse"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/handle_payment/enum.Error.html\" title=\"enum casper_types::system::handle_payment::Error\">Error</a>","synthetic":true,"types":["casper_types::system::handle_payment::error::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/mint/enum.Error.html\" title=\"enum casper_types::system::mint::Error\">Error</a>","synthetic":true,"types":["casper_types::system::mint::error::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/enum.Error.html\" title=\"enum casper_types::system::Error\">Error</a>","synthetic":true,"types":["casper_types::system::error::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/enum.SystemContractType.html\" title=\"enum casper_types::system::SystemContractType\">SystemContractType</a>","synthetic":true,"types":["casper_types::system::system_contract_type::SystemContractType"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/enum.CallStackElementTag.html\" title=\"enum casper_types::system::CallStackElementTag\">CallStackElementTag</a>","synthetic":true,"types":["casper_types::system::CallStackElementTag"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/system/enum.CallStackElement.html\" title=\"enum casper_types::system::CallStackElement\">CallStackElement</a>","synthetic":true,"types":["casper_types::system::CallStackElement"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Timestamp.html\" title=\"struct casper_types::Timestamp\">Timestamp</a>","synthetic":true,"types":["casper_types::timestamp::Timestamp"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.TimeDiff.html\" title=\"struct casper_types::TimeDiff\">TimeDiff</a>","synthetic":true,"types":["casper_types::timestamp::TimeDiff"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.DeployHash.html\" title=\"struct casper_types::DeployHash\">DeployHash</a>","synthetic":true,"types":["casper_types::transfer::DeployHash"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.Transfer.html\" title=\"struct casper_types::Transfer\">Transfer</a>","synthetic":true,"types":["casper_types::transfer::Transfer"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.TransferFromStrError.html\" title=\"enum casper_types::TransferFromStrError\">FromStrError</a>","synthetic":true,"types":["casper_types::transfer::FromStrError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.TransferAddr.html\" title=\"struct casper_types::TransferAddr\">TransferAddr</a>","synthetic":true,"types":["casper_types::transfer::TransferAddr"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.TransferredTo.html\" title=\"enum casper_types::TransferredTo\">TransferredTo</a>","synthetic":true,"types":["casper_types::transfer_result::TransferredTo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.U512.html\" title=\"struct casper_types::U512\">U512</a>","synthetic":true,"types":["casper_types::uint::macro_code::U512"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.U256.html\" title=\"struct casper_types::U256\">U256</a>","synthetic":true,"types":["casper_types::uint::macro_code::U256"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.U128.html\" title=\"struct casper_types::U128\">U128</a>","synthetic":true,"types":["casper_types::uint::macro_code::U128"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.UIntParseError.html\" title=\"enum casper_types::UIntParseError\">UIntParseError</a>","synthetic":true,"types":["casper_types::uint::UIntParseError"]},{"text":"impl Freeze for <a class=\"enum\" href=\"casper_types/enum.URefFromStrError.html\" title=\"enum casper_types::URefFromStrError\">FromStrError</a>","synthetic":true,"types":["casper_types::uref::FromStrError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"casper_types/struct.URef.html\" title=\"struct casper_types::URef\">URef</a>","synthetic":true,"types":["casper_types::uref::URef"]}];
implementors["contract"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"contract/event/enum.DropLinkedEvent.html\" title=\"enum contract::event::DropLinkedEvent\">DropLinkedEvent</a>","synthetic":true,"types":["contract::event::DropLinkedEvent"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.MetadataHash.html\" title=\"struct contract::ndpc_types::MetadataHash\">MetadataHash</a>","synthetic":true,"types":["contract::ndpc_types::MetadataHash"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.PublishRequest.html\" title=\"struct contract::ndpc_types::PublishRequest\">PublishRequest</a>","synthetic":true,"types":["contract::ndpc_types::PublishRequest"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.NftMetadata.html\" title=\"struct contract::ndpc_types::NftMetadata\">NftMetadata</a>","synthetic":true,"types":["contract::ndpc_types::NftMetadata"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.NFTHolder.html\" title=\"struct contract::ndpc_types::NFTHolder\">NFTHolder</a>","synthetic":true,"types":["contract::ndpc_types::NFTHolder"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.ApprovedNFT.html\" title=\"struct contract::ndpc_types::ApprovedNFT\">ApprovedNFT</a>","synthetic":true,"types":["contract::ndpc_types::ApprovedNFT"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_types/struct.U64list.html\" title=\"struct contract::ndpc_types::U64list\">U64list</a>","synthetic":true,"types":["contract::ndpc_types::U64list"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"contract/ndpc_utils/struct.PaymentDetails.html\" title=\"struct contract::ndpc_utils::PaymentDetails\">PaymentDetails</a>","synthetic":true,"types":["contract::ndpc_utils::PaymentDetails"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Freeze.html\" title=\"trait core::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"contract/enum.Error.html\" title=\"enum contract::Error\">Error</a>","synthetic":true,"types":["contract::Error"]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"crypto_mac/struct.MacError.html\" title=\"struct crypto_mac::MacError\">MacError</a>","synthetic":true,"types":["crypto_mac::errors::MacError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"crypto_mac/struct.InvalidKeyLength.html\" title=\"struct crypto_mac::InvalidKeyLength\">InvalidKeyLength</a>","synthetic":true,"types":["crypto_mac::errors::InvalidKeyLength"]},{"text":"impl&lt;M&gt; Freeze for <a class=\"struct\" href=\"crypto_mac/struct.Output.html\" title=\"struct crypto_mac::Output\">Output</a>&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as <a class=\"trait\" href=\"crypto_mac/trait.Mac.html\" title=\"trait crypto_mac::Mac\">Mac</a>&gt;::<a class=\"associatedtype\" href=\"crypto_mac/trait.Mac.html#associatedtype.OutputSize\" title=\"type crypto_mac::Mac::OutputSize\">OutputSize</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["crypto_mac::Output"]}];
implementors["curve25519_dalek"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/scalar/struct.Scalar.html\" title=\"struct curve25519_dalek::scalar::Scalar\">Scalar</a>","synthetic":true,"types":["curve25519_dalek::scalar::Scalar"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/montgomery/struct.MontgomeryPoint.html\" title=\"struct curve25519_dalek::montgomery::MontgomeryPoint\">MontgomeryPoint</a>","synthetic":true,"types":["curve25519_dalek::montgomery::MontgomeryPoint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.CompressedEdwardsY.html\" title=\"struct curve25519_dalek::edwards::CompressedEdwardsY\">CompressedEdwardsY</a>","synthetic":true,"types":["curve25519_dalek::edwards::CompressedEdwardsY"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsPoint.html\" title=\"struct curve25519_dalek::edwards::EdwardsPoint\">EdwardsPoint</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsPoint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTableRadix16.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTableRadix16\">EdwardsBasepointTableRadix16</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTableRadix16"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTableRadix32.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTableRadix32\">EdwardsBasepointTableRadix32</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTableRadix32"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTableRadix64.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTableRadix64\">EdwardsBasepointTableRadix64</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTableRadix64"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTableRadix128.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTableRadix128\">EdwardsBasepointTableRadix128</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTableRadix128"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTableRadix256.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTableRadix256\">EdwardsBasepointTableRadix256</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTableRadix256"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsBasepointTable.html\" title=\"struct curve25519_dalek::edwards::EdwardsBasepointTable\">EdwardsBasepointTable</a>","synthetic":true,"types":["curve25519_dalek::edwards::EdwardsBasepointTable"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/ristretto/struct.CompressedRistretto.html\" title=\"struct curve25519_dalek::ristretto::CompressedRistretto\">CompressedRistretto</a>","synthetic":true,"types":["curve25519_dalek::ristretto::CompressedRistretto"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/ristretto/struct.RistrettoPoint.html\" title=\"struct curve25519_dalek::ristretto::RistrettoPoint\">RistrettoPoint</a>","synthetic":true,"types":["curve25519_dalek::ristretto::RistrettoPoint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"curve25519_dalek/ristretto/struct.RistrettoBasepointTable.html\" title=\"struct curve25519_dalek::ristretto::RistrettoBasepointTable\">RistrettoBasepointTable</a>","synthetic":true,"types":["curve25519_dalek::ristretto::RistrettoBasepointTable"]}];
implementors["digest"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"digest/struct.InvalidOutputSize.html\" title=\"struct digest::InvalidOutputSize\">InvalidOutputSize</a>","synthetic":true,"types":["digest::errors::InvalidOutputSize"]}];
implementors["ecdsa"] = [{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"ecdsa/asn1/struct.Signature.html\" title=\"struct ecdsa::asn1::Signature\">Signature</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>, <a class=\"struct\" href=\"typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>&gt;, <a class=\"struct\" href=\"typenum/bit/struct.B0.html\" title=\"struct typenum::bit::B0\">B0</a>&gt;, <a class=\"struct\" href=\"typenum/bit/struct.B0.html\" title=\"struct typenum::bit::B0\">B0</a>&gt;, <a class=\"struct\" href=\"typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["ecdsa::asn1::Signature"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"ecdsa/sign/struct.SigningKey.html\" title=\"struct ecdsa::sign::SigningKey\">SigningKey</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html\" title=\"trait elliptic_curve::point::ProjectiveArithmetic\">ProjectiveArithmetic</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html#associatedtype.ProjectivePoint\" title=\"type elliptic_curve::point::ProjectiveArithmetic::ProjectivePoint\">ProjectivePoint</a> as <a class=\"trait\" href=\"group/trait.Group.html\" title=\"trait group::Group\">Group</a>&gt;::<a class=\"associatedtype\" href=\"group/trait.Group.html#associatedtype.Scalar\" title=\"type group::Group::Scalar\">Scalar</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["ecdsa::sign::SigningKey"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"ecdsa/verify/struct.VerifyingKey.html\" title=\"struct ecdsa::verify::VerifyingKey\">VerifyingKey</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html\" title=\"trait elliptic_curve::point::ProjectiveArithmetic\">ProjectiveArithmetic</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html#associatedtype.ProjectivePoint\" title=\"type elliptic_curve::point::ProjectiveArithmetic::ProjectivePoint\">ProjectivePoint</a> as <a class=\"trait\" href=\"group/trait.Curve.html\" title=\"trait group::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"group/trait.Curve.html#associatedtype.AffineRepr\" title=\"type group::Curve::AffineRepr\">AffineRepr</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["ecdsa::verify::VerifyingKey"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"ecdsa/struct.Signature.html\" title=\"struct ecdsa::Signature\">Signature</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["ecdsa::Signature"]}];
implementors["ed25519"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"ed25519/struct.Signature.html\" title=\"struct ed25519::Signature\">Signature</a>","synthetic":true,"types":["ed25519::Signature"]}];
implementors["ed25519_dalek"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"ed25519_dalek/struct.Keypair.html\" title=\"struct ed25519_dalek::Keypair\">Keypair</a>","synthetic":true,"types":["ed25519_dalek::keypair::Keypair"]},{"text":"impl Freeze for <a class=\"struct\" href=\"ed25519_dalek/struct.PublicKey.html\" title=\"struct ed25519_dalek::PublicKey\">PublicKey</a>","synthetic":true,"types":["ed25519_dalek::public::PublicKey"]},{"text":"impl Freeze for <a class=\"struct\" href=\"ed25519_dalek/struct.SecretKey.html\" title=\"struct ed25519_dalek::SecretKey\">SecretKey</a>","synthetic":true,"types":["ed25519_dalek::secret::SecretKey"]},{"text":"impl Freeze for <a class=\"struct\" href=\"ed25519_dalek/struct.ExpandedSecretKey.html\" title=\"struct ed25519_dalek::ExpandedSecretKey\">ExpandedSecretKey</a>","synthetic":true,"types":["ed25519_dalek::secret::ExpandedSecretKey"]}];
implementors["elliptic_curve"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"elliptic_curve/error/struct.Error.html\" title=\"struct elliptic_curve::error::Error\">Error</a>","synthetic":true,"types":["elliptic_curve::error::Error"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"elliptic_curve/sec1/struct.EncodedPoint.html\" title=\"struct elliptic_curve::sec1::EncodedPoint\">EncodedPoint</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a> as <a class=\"trait\" href=\"elliptic_curve/ops/trait.Add.html\" title=\"trait elliptic_curve::ops::Add\">Add</a>&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/ops/trait.Add.html#associatedtype.Output\" title=\"type elliptic_curve::ops::Add::Output\">Output</a> as <a class=\"trait\" href=\"elliptic_curve/ops/trait.Add.html\" title=\"trait elliptic_curve::ops::Add\">Add</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;<a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>, <a class=\"struct\" href=\"elliptic_curve/consts/struct.B1.html\" title=\"struct elliptic_curve::consts::B1\">B1</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/ops/trait.Add.html#associatedtype.Output\" title=\"type elliptic_curve::ops::Add::Output\">Output</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["elliptic_curve::sec1::EncodedPoint"]},{"text":"impl&lt;'a, C&gt; Freeze for <a class=\"enum\" href=\"elliptic_curve/sec1/enum.Coordinates.html\" title=\"enum elliptic_curve::sec1::Coordinates\">Coordinates</a>&lt;'a, C&gt;","synthetic":true,"types":["elliptic_curve::sec1::Coordinates"]},{"text":"impl Freeze for <a class=\"enum\" href=\"elliptic_curve/sec1/enum.Tag.html\" title=\"enum elliptic_curve::sec1::Tag\">Tag</a>","synthetic":true,"types":["elliptic_curve::sec1::Tag"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"elliptic_curve/public_key/struct.PublicKey.html\" title=\"struct elliptic_curve::public_key::PublicKey\">PublicKey</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html\" title=\"trait elliptic_curve::point::ProjectiveArithmetic\">ProjectiveArithmetic</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html#associatedtype.ProjectivePoint\" title=\"type elliptic_curve::point::ProjectiveArithmetic::ProjectivePoint\">ProjectivePoint</a> as <a class=\"trait\" href=\"group/trait.Curve.html\" title=\"trait group::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"group/trait.Curve.html#associatedtype.AffineRepr\" title=\"type group::Curve::AffineRepr\">AffineRepr</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["elliptic_curve::public_key::PublicKey"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"elliptic_curve/scalar/struct.NonZeroScalar.html\" title=\"struct elliptic_curve::scalar::NonZeroScalar\">NonZeroScalar</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html\" title=\"trait elliptic_curve::point::ProjectiveArithmetic\">ProjectiveArithmetic</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/point/trait.ProjectiveArithmetic.html#associatedtype.ProjectivePoint\" title=\"type elliptic_curve::point::ProjectiveArithmetic::ProjectivePoint\">ProjectivePoint</a> as <a class=\"trait\" href=\"elliptic_curve/trait.Group.html\" title=\"trait elliptic_curve::Group\">Group</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Group.html#associatedtype.Scalar\" title=\"type elliptic_curve::Group::Scalar\">Scalar</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["elliptic_curve::scalar::NonZeroScalar"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"elliptic_curve/secret_key/struct.SecretKey.html\" title=\"struct elliptic_curve::secret_key::SecretKey\">SecretKey</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as <a class=\"trait\" href=\"elliptic_curve/secret_key/trait.SecretValue.html\" title=\"trait elliptic_curve::secret_key::SecretValue\">SecretValue</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/secret_key/trait.SecretValue.html#associatedtype.Secret\" title=\"type elliptic_curve::secret_key::SecretValue::Secret\">Secret</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["elliptic_curve::secret_key::SecretKey"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"struct\" href=\"elliptic_curve/secret_key/struct.SecretBytes.html\" title=\"struct elliptic_curve::secret_key::SecretBytes\">SecretBytes</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;C as <a class=\"trait\" href=\"elliptic_curve/trait.Curve.html\" title=\"trait elliptic_curve::Curve\">Curve</a>&gt;::<a class=\"associatedtype\" href=\"elliptic_curve/trait.Curve.html#associatedtype.FieldSize\" title=\"type elliptic_curve::Curve::FieldSize\">FieldSize</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["elliptic_curve::secret_key::SecretBytes"]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Freeze for <a class=\"struct\" href=\"generic_array/iter/struct.GenericArrayIter.html\" title=\"struct generic_array::iter::GenericArrayIter\">GenericArrayIter</a>&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["generic_array::iter::GenericArrayIter"]},{"text":"impl&lt;T, U&gt; Freeze for <a class=\"struct\" href=\"generic_array/struct.GenericArray.html\" title=\"struct generic_array::GenericArray\">GenericArray</a>&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["generic_array::GenericArray"]}];
implementors["hex"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"hex/enum.FromHexError.html\" title=\"enum hex::FromHexError\">FromHexError</a>","synthetic":true,"types":["hex::error::FromHexError"]}];
implementors["hex_fmt"] = [{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"hex_fmt/struct.HexFmt.html\" title=\"struct hex_fmt::HexFmt\">HexFmt</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["hex_fmt::HexFmt"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"hex_fmt/struct.HexList.html\" title=\"struct hex_fmt::HexList\">HexList</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["hex_fmt::HexList"]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"hmac/struct.Hmac.html\" title=\"struct hmac::Hmac\">Hmac</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as <a class=\"trait\" href=\"digest/trait.BlockInput.html\" title=\"trait digest::BlockInput\">BlockInput</a>&gt;::<a class=\"associatedtype\" href=\"digest/trait.BlockInput.html#associatedtype.BlockSize\" title=\"type digest::BlockInput::BlockSize\">BlockSize</a> as <a class=\"trait\" href=\"generic_array/trait.ArrayLength.html\" title=\"trait generic_array::ArrayLength\">ArrayLength</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"generic_array/trait.ArrayLength.html#associatedtype.ArrayType\" title=\"type generic_array::ArrayLength::ArrayType\">ArrayType</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["hmac::Hmac"]}];
implementors["itoa"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"itoa/struct.Buffer.html\" title=\"struct itoa::Buffer\">Buffer</a>","synthetic":true,"types":["itoa::Buffer"]}];
implementors["k256"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"k256/struct.AffinePoint.html\" title=\"struct k256::AffinePoint\">AffinePoint</a>","synthetic":true,"types":["k256::arithmetic::affine::AffinePoint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/struct.ProjectivePoint.html\" title=\"struct k256::ProjectivePoint\">ProjectivePoint</a>","synthetic":true,"types":["k256::arithmetic::projective::ProjectivePoint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/struct.Scalar.html\" title=\"struct k256::Scalar\">Scalar</a>","synthetic":true,"types":["k256::arithmetic::scalar::Scalar"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/ecdsa/recoverable/struct.Signature.html\" title=\"struct k256::ecdsa::recoverable::Signature\">Signature</a>","synthetic":true,"types":["k256::ecdsa::recoverable::Signature"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/ecdsa/recoverable/struct.Id.html\" title=\"struct k256::ecdsa::recoverable::Id\">Id</a>","synthetic":true,"types":["k256::ecdsa::recoverable::Id"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/ecdsa/struct.SigningKey.html\" title=\"struct k256::ecdsa::SigningKey\">SigningKey</a>","synthetic":true,"types":["k256::ecdsa::sign::SigningKey"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/ecdsa/struct.VerifyingKey.html\" title=\"struct k256::ecdsa::VerifyingKey\">VerifyingKey</a>","synthetic":true,"types":["k256::ecdsa::verify::VerifyingKey"]},{"text":"impl Freeze for <a class=\"struct\" href=\"k256/struct.Secp256k1.html\" title=\"struct k256::Secp256k1\">Secp256k1</a>","synthetic":true,"types":["k256::Secp256k1"]}];
implementors["memory_units"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"memory_units/wasm32/struct.Words.html\" title=\"struct memory_units::wasm32::Words\">Words</a>","synthetic":true,"types":["memory_units::wasm32::Words"]},{"text":"impl Freeze for <a class=\"struct\" href=\"memory_units/wasm32/struct.Pages.html\" title=\"struct memory_units::wasm32::Pages\">Pages</a>","synthetic":true,"types":["memory_units::wasm32::Pages"]},{"text":"impl Freeze for <a class=\"struct\" href=\"memory_units/struct.Bytes.html\" title=\"struct memory_units::Bytes\">Bytes</a>","synthetic":true,"types":["memory_units::Bytes"]}];
implementors["num_bigint"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"num_bigint/enum.Sign.html\" title=\"enum num_bigint::Sign\">Sign</a>","synthetic":true,"types":["num_bigint::bigint::Sign"]},{"text":"impl Freeze for <a class=\"struct\" href=\"num_bigint/struct.BigInt.html\" title=\"struct num_bigint::BigInt\">BigInt</a>","synthetic":true,"types":["num_bigint::bigint::BigInt"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"num_bigint/struct.U32Digits.html\" title=\"struct num_bigint::U32Digits\">U32Digits</a>&lt;'a&gt;","synthetic":true,"types":["num_bigint::biguint::iter::U32Digits"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"num_bigint/struct.U64Digits.html\" title=\"struct num_bigint::U64Digits\">U64Digits</a>&lt;'a&gt;","synthetic":true,"types":["num_bigint::biguint::iter::U64Digits"]},{"text":"impl Freeze for <a class=\"struct\" href=\"num_bigint/struct.BigUint.html\" title=\"struct num_bigint::BigUint\">BigUint</a>","synthetic":true,"types":["num_bigint::biguint::BigUint"]},{"text":"impl Freeze for <a class=\"struct\" href=\"num_bigint/struct.ParseBigIntError.html\" title=\"struct num_bigint::ParseBigIntError\">ParseBigIntError</a>","synthetic":true,"types":["num_bigint::ParseBigIntError"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["num_bigint::TryFromBigIntError"]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["num_complex::Complex"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"num_complex/struct.ParseComplexError.html\" title=\"struct num_complex::ParseComplexError\">ParseComplexError</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":["num_complex::ParseComplexError"]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_integer::ExtendedGcd"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"num_integer/struct.IterBinomial.html\" title=\"struct num_integer::IterBinomial\">IterBinomial</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["num_integer::IterBinomial"]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.Range.html\" title=\"struct num_iter::Range\">Range</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::Range"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.RangeInclusive.html\" title=\"struct num_iter::RangeInclusive\">RangeInclusive</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::RangeInclusive"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.RangeStep.html\" title=\"struct num_iter::RangeStep\">RangeStep</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::RangeStep"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.RangeStepInclusive.html\" title=\"struct num_iter::RangeStepInclusive\">RangeStepInclusive</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::RangeStepInclusive"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.RangeFrom.html\" title=\"struct num_iter::RangeFrom\">RangeFrom</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::RangeFrom"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"num_iter/struct.RangeStepFrom.html\" title=\"struct num_iter::RangeStepFrom\">RangeStepFrom</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["num_iter::RangeStepFrom"]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"num_rational/struct.Ratio.html\" title=\"struct num_rational::Ratio\">Ratio</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["num_rational::Ratio"]},{"text":"impl Freeze for <a class=\"struct\" href=\"num_rational/struct.ParseRatioError.html\" title=\"struct num_rational::ParseRatioError\">ParseRatioError</a>","synthetic":true,"types":["num_rational::ParseRatioError"]}];
implementors["num_traits"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"num_traits/enum.FloatErrorKind.html\" title=\"enum num_traits::FloatErrorKind\">FloatErrorKind</a>","synthetic":true,"types":["num_traits::FloatErrorKind"]},{"text":"impl Freeze for <a class=\"struct\" href=\"num_traits/struct.ParseFloatError.html\" title=\"struct num_traits::ParseFloatError\">ParseFloatError</a>","synthetic":true,"types":["num_traits::ParseFloatError"]}];
implementors["rand"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Bernoulli.html\" title=\"struct rand::distributions::Bernoulli\">Bernoulli</a>","synthetic":true,"types":["rand::distributions::bernoulli::Bernoulli"]},{"text":"impl Freeze for <a class=\"enum\" href=\"rand/distributions/enum.BernoulliError.html\" title=\"enum rand::distributions::BernoulliError\">BernoulliError</a>","synthetic":true,"types":["rand::distributions::bernoulli::BernoulliError"]},{"text":"impl&lt;D, R, T&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/struct.DistIter.html\" title=\"struct rand::distributions::DistIter\">DistIter</a>&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":["rand::distributions::distribution::DistIter"]},{"text":"impl&lt;D, F, T, S&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/struct.DistMap.html\" title=\"struct rand::distributions::DistMap\">DistMap</a>&lt;D, F, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":["rand::distributions::distribution::DistMap"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/struct.OpenClosed01.html\" title=\"struct rand::distributions::OpenClosed01\">OpenClosed01</a>","synthetic":true,"types":["rand::distributions::float::OpenClosed01"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Open01.html\" title=\"struct rand::distributions::Open01\">Open01</a>","synthetic":true,"types":["rand::distributions::float::Open01"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Alphanumeric.html\" title=\"struct rand::distributions::Alphanumeric\">Alphanumeric</a>","synthetic":true,"types":["rand::distributions::other::Alphanumeric"]},{"text":"impl&lt;'a, T&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Slice.html\" title=\"struct rand::distributions::Slice\">Slice</a>&lt;'a, T&gt;","synthetic":true,"types":["rand::distributions::slice::Slice"]},{"text":"impl&lt;X&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Uniform.html\" title=\"struct rand::distributions::Uniform\">Uniform</a>&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as <a class=\"trait\" href=\"rand/distributions/uniform/trait.SampleUniform.html\" title=\"trait rand::distributions::uniform::SampleUniform\">SampleUniform</a>&gt;::<a class=\"associatedtype\" href=\"rand/distributions/uniform/trait.SampleUniform.html#associatedtype.Sampler\" title=\"type rand::distributions::uniform::SampleUniform::Sampler\">Sampler</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["rand::distributions::uniform::Uniform"]},{"text":"impl&lt;X&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/uniform/struct.UniformInt.html\" title=\"struct rand::distributions::uniform::UniformInt\">UniformInt</a>&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":["rand::distributions::uniform::UniformInt"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/uniform/struct.UniformChar.html\" title=\"struct rand::distributions::uniform::UniformChar\">UniformChar</a>","synthetic":true,"types":["rand::distributions::uniform::UniformChar"]},{"text":"impl&lt;X&gt; Freeze for <a class=\"struct\" href=\"rand/distributions/uniform/struct.UniformFloat.html\" title=\"struct rand::distributions::uniform::UniformFloat\">UniformFloat</a>&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":["rand::distributions::uniform::UniformFloat"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/uniform/struct.UniformDuration.html\" title=\"struct rand::distributions::uniform::UniformDuration\">UniformDuration</a>","synthetic":true,"types":["rand::distributions::uniform::UniformDuration"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/distributions/struct.Standard.html\" title=\"struct rand::distributions::Standard\">Standard</a>","synthetic":true,"types":["rand::distributions::Standard"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/rngs/mock/struct.StepRng.html\" title=\"struct rand::rngs::mock::StepRng\">StepRng</a>","synthetic":true,"types":["rand::rngs::mock::StepRng"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand/rngs/struct.SmallRng.html\" title=\"struct rand::rngs::SmallRng\">SmallRng</a>","synthetic":true,"types":["rand::rngs::small::SmallRng"]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rand_core/block/struct.BlockRng.html\" title=\"struct rand_core::block::BlockRng\">BlockRng</a>&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as <a class=\"trait\" href=\"rand_core/block/trait.BlockRngCore.html\" title=\"trait rand_core::block::BlockRngCore\">BlockRngCore</a>&gt;::<a class=\"associatedtype\" href=\"rand_core/block/trait.BlockRngCore.html#associatedtype.Results\" title=\"type rand_core::block::BlockRngCore::Results\">Results</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["rand_core::block::BlockRng"]},{"text":"impl&lt;R:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rand_core/block/struct.BlockRng64.html\" title=\"struct rand_core::block::BlockRng64\">BlockRng64</a>&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as <a class=\"trait\" href=\"rand_core/block/trait.BlockRngCore.html\" title=\"trait rand_core::block::BlockRngCore\">BlockRngCore</a>&gt;::<a class=\"associatedtype\" href=\"rand_core/block/trait.BlockRngCore.html#associatedtype.Results\" title=\"type rand_core::block::BlockRngCore::Results\">Results</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["rand_core::block::BlockRng64"]},{"text":"impl Freeze for <a class=\"struct\" href=\"rand_core/struct.Error.html\" title=\"struct rand_core::Error\">Error</a>","synthetic":true,"types":["rand_core::error::Error"]}];
implementors["ryu"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"ryu/struct.Buffer.html\" title=\"struct ryu::Buffer\">Buffer</a>","synthetic":true,"types":["ryu::buffer::Buffer"]}];
implementors["serde"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"serde/de/value/struct.Error.html\" title=\"struct serde::de::value::Error\">Error</a>","synthetic":true,"types":["serde::de::value::Error"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.UnitDeserializer.html\" title=\"struct serde::de::value::UnitDeserializer\">UnitDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::UnitDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.BoolDeserializer.html\" title=\"struct serde::de::value::BoolDeserializer\">BoolDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::BoolDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.I8Deserializer.html\" title=\"struct serde::de::value::I8Deserializer\">I8Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::I8Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.I16Deserializer.html\" title=\"struct serde::de::value::I16Deserializer\">I16Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::I16Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.I32Deserializer.html\" title=\"struct serde::de::value::I32Deserializer\">I32Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::I32Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.I64Deserializer.html\" title=\"struct serde::de::value::I64Deserializer\">I64Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::I64Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.IsizeDeserializer.html\" title=\"struct serde::de::value::IsizeDeserializer\">IsizeDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::IsizeDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.U8Deserializer.html\" title=\"struct serde::de::value::U8Deserializer\">U8Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::U8Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.U16Deserializer.html\" title=\"struct serde::de::value::U16Deserializer\">U16Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::U16Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.U64Deserializer.html\" title=\"struct serde::de::value::U64Deserializer\">U64Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::U64Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.UsizeDeserializer.html\" title=\"struct serde::de::value::UsizeDeserializer\">UsizeDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::UsizeDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.F32Deserializer.html\" title=\"struct serde::de::value::F32Deserializer\">F32Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::F32Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.F64Deserializer.html\" title=\"struct serde::de::value::F64Deserializer\">F64Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::F64Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.CharDeserializer.html\" title=\"struct serde::de::value::CharDeserializer\">CharDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::CharDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.I128Deserializer.html\" title=\"struct serde::de::value::I128Deserializer\">I128Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::I128Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.U128Deserializer.html\" title=\"struct serde::de::value::U128Deserializer\">U128Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::U128Deserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.U32Deserializer.html\" title=\"struct serde::de::value::U32Deserializer\">U32Deserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::U32Deserializer"]},{"text":"impl&lt;'a, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.StrDeserializer.html\" title=\"struct serde::de::value::StrDeserializer\">StrDeserializer</a>&lt;'a, E&gt;","synthetic":true,"types":["serde::de::value::StrDeserializer"]},{"text":"impl&lt;'de, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.BorrowedStrDeserializer.html\" title=\"struct serde::de::value::BorrowedStrDeserializer\">BorrowedStrDeserializer</a>&lt;'de, E&gt;","synthetic":true,"types":["serde::de::value::BorrowedStrDeserializer"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.StringDeserializer.html\" title=\"struct serde::de::value::StringDeserializer\">StringDeserializer</a>&lt;E&gt;","synthetic":true,"types":["serde::de::value::StringDeserializer"]},{"text":"impl&lt;'a, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.CowStrDeserializer.html\" title=\"struct serde::de::value::CowStrDeserializer\">CowStrDeserializer</a>&lt;'a, E&gt;","synthetic":true,"types":["serde::de::value::CowStrDeserializer"]},{"text":"impl&lt;'a, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.BytesDeserializer.html\" title=\"struct serde::de::value::BytesDeserializer\">BytesDeserializer</a>&lt;'a, E&gt;","synthetic":true,"types":["serde::de::value::BytesDeserializer"]},{"text":"impl&lt;'de, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.BorrowedBytesDeserializer.html\" title=\"struct serde::de::value::BorrowedBytesDeserializer\">BorrowedBytesDeserializer</a>&lt;'de, E&gt;","synthetic":true,"types":["serde::de::value::BorrowedBytesDeserializer"]},{"text":"impl&lt;I, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.SeqDeserializer.html\" title=\"struct serde::de::value::SeqDeserializer\">SeqDeserializer</a>&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":["serde::de::value::SeqDeserializer"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.SeqAccessDeserializer.html\" title=\"struct serde::de::value::SeqAccessDeserializer\">SeqAccessDeserializer</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["serde::de::value::SeqAccessDeserializer"]},{"text":"impl&lt;'de, I, E&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.MapDeserializer.html\" title=\"struct serde::de::value::MapDeserializer\">MapDeserializer</a>&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\" title=\"type core::iter::traits::iterator::Iterator::Item\">Item</a> as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":["serde::de::value::MapDeserializer"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.MapAccessDeserializer.html\" title=\"struct serde::de::value::MapAccessDeserializer\">MapAccessDeserializer</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["serde::de::value::MapAccessDeserializer"]},{"text":"impl&lt;A&gt; Freeze for <a class=\"struct\" href=\"serde/de/value/struct.EnumAccessDeserializer.html\" title=\"struct serde::de::value::EnumAccessDeserializer\">EnumAccessDeserializer</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":["serde::de::value::EnumAccessDeserializer"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde/de/struct.IgnoredAny.html\" title=\"struct serde::de::IgnoredAny\">IgnoredAny</a>","synthetic":true,"types":["serde::de::ignored_any::IgnoredAny"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"enum\" href=\"serde/de/enum.Unexpected.html\" title=\"enum serde::de::Unexpected\">Unexpected</a>&lt;'a&gt;","synthetic":true,"types":["serde::de::Unexpected"]},{"text":"impl&lt;Ok, Error&gt; Freeze for <a class=\"struct\" href=\"serde/ser/struct.Impossible.html\" title=\"struct serde::ser::Impossible\">Impossible</a>&lt;Ok, Error&gt;","synthetic":true,"types":["serde::ser::impossible::Impossible"]}];
implementors["serde_bytes"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"serde_bytes/struct.Bytes.html\" title=\"struct serde_bytes::Bytes\">Bytes</a>","synthetic":true,"types":["serde_bytes::bytes::Bytes"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde_bytes/struct.ByteBuf.html\" title=\"struct serde_bytes::ByteBuf\">ByteBuf</a>","synthetic":true,"types":["serde_bytes::bytebuf::ByteBuf"]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/de/struct.SliceRead.html\" title=\"struct serde_json::de::SliceRead\">SliceRead</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::read::SliceRead"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/de/struct.StrRead.html\" title=\"struct serde_json::de::StrRead\">StrRead</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::read::StrRead"]},{"text":"impl&lt;R&gt; Freeze for <a class=\"struct\" href=\"serde_json/struct.Deserializer.html\" title=\"struct serde_json::Deserializer\">Deserializer</a>&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":["serde_json::de::Deserializer"]},{"text":"impl&lt;'de, R, T&gt; Freeze for <a class=\"struct\" href=\"serde_json/struct.StreamDeserializer.html\" title=\"struct serde_json::StreamDeserializer\">StreamDeserializer</a>&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":["serde_json::de::StreamDeserializer"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde_json/struct.Error.html\" title=\"struct serde_json::Error\">Error</a>","synthetic":true,"types":["serde_json::error::Error"]},{"text":"impl Freeze for <a class=\"enum\" href=\"serde_json/error/enum.Category.html\" title=\"enum serde_json::error::Category\">Category</a>","synthetic":true,"types":["serde_json::error::Category"]},{"text":"impl&lt;K, V&gt; Freeze for <a class=\"struct\" href=\"serde_json/struct.Map.html\" title=\"struct serde_json::Map\">Map</a>&lt;K, V&gt;","synthetic":true,"types":["serde_json::map::Map"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"enum\" href=\"serde_json/map/enum.Entry.html\" title=\"enum serde_json::map::Entry\">Entry</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::Entry"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.VacantEntry.html\" title=\"struct serde_json::map::VacantEntry\">VacantEntry</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::VacantEntry"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.OccupiedEntry.html\" title=\"struct serde_json::map::OccupiedEntry\">OccupiedEntry</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::OccupiedEntry"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.Iter.html\" title=\"struct serde_json::map::Iter\">Iter</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::Iter"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.IterMut.html\" title=\"struct serde_json::map::IterMut\">IterMut</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::IterMut"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde_json/map/struct.IntoIter.html\" title=\"struct serde_json::map::IntoIter\">IntoIter</a>","synthetic":true,"types":["serde_json::map::IntoIter"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.Keys.html\" title=\"struct serde_json::map::Keys\">Keys</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::Keys"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.Values.html\" title=\"struct serde_json::map::Values\">Values</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::Values"]},{"text":"impl&lt;'a&gt; Freeze for <a class=\"struct\" href=\"serde_json/map/struct.ValuesMut.html\" title=\"struct serde_json::map::ValuesMut\">ValuesMut</a>&lt;'a&gt;","synthetic":true,"types":["serde_json::map::ValuesMut"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde_json/value/struct.Serializer.html\" title=\"struct serde_json::value::Serializer\">Serializer</a>","synthetic":true,"types":["serde_json::value::ser::Serializer"]},{"text":"impl Freeze for <a class=\"struct\" href=\"serde_json/value/struct.Number.html\" title=\"struct serde_json::value::Number\">Number</a>","synthetic":true,"types":["serde_json::number::Number"]},{"text":"impl Freeze for <a class=\"enum\" href=\"serde_json/enum.Value.html\" title=\"enum serde_json::Value\">Value</a>","synthetic":true,"types":["serde_json::value::Value"]}];
implementors["sha2"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha256.html\" title=\"struct sha2::Sha256\">Sha256</a>","synthetic":true,"types":["sha2::sha256::Sha256"]},{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha224.html\" title=\"struct sha2::Sha224\">Sha224</a>","synthetic":true,"types":["sha2::sha256::Sha224"]},{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha512.html\" title=\"struct sha2::Sha512\">Sha512</a>","synthetic":true,"types":["sha2::sha512::Sha512"]},{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha384.html\" title=\"struct sha2::Sha384\">Sha384</a>","synthetic":true,"types":["sha2::sha512::Sha384"]},{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha512Trunc256.html\" title=\"struct sha2::Sha512Trunc256\">Sha512Trunc256</a>","synthetic":true,"types":["sha2::sha512::Sha512Trunc256"]},{"text":"impl Freeze for <a class=\"struct\" href=\"sha2/struct.Sha512Trunc224.html\" title=\"struct sha2::Sha512Trunc224\">Sha512Trunc224</a>","synthetic":true,"types":["sha2::sha512::Sha512Trunc224"]}];
implementors["signature"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"signature/struct.Error.html\" title=\"struct signature::Error\">Error</a>","synthetic":true,"types":["signature::error::Error"]}];
implementors["subtle"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>","synthetic":true,"types":["subtle::Choice"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"subtle/struct.CtOption.html\" title=\"struct subtle::CtOption\">CtOption</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["subtle::CtOption"]}];
implementors["typenum"] = [{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/bit/struct.B0.html\" title=\"struct typenum::bit::B0\">B0</a>","synthetic":true,"types":["typenum::bit::B0"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/bit/struct.B1.html\" title=\"struct typenum::bit::B1\">B1</a>","synthetic":true,"types":["typenum::bit::B1"]},{"text":"impl&lt;U&gt; Freeze for <a class=\"struct\" href=\"typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":["typenum::int::PInt"]},{"text":"impl&lt;U&gt; Freeze for <a class=\"struct\" href=\"typenum/int/struct.NInt.html\" title=\"struct typenum::int::NInt\">NInt</a>&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":["typenum::int::NInt"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>","synthetic":true,"types":["typenum::int::Z0"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>","synthetic":true,"types":["typenum::uint::UTerm"]},{"text":"impl&lt;U, B&gt; Freeze for <a class=\"struct\" href=\"typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":["typenum::uint::UInt"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/array/struct.ATerm.html\" title=\"struct typenum::array::ATerm\">ATerm</a>","synthetic":true,"types":["typenum::array::ATerm"]},{"text":"impl&lt;V, A&gt; Freeze for <a class=\"struct\" href=\"typenum/array/struct.TArr.html\" title=\"struct typenum::array::TArr\">TArr</a>&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":["typenum::array::TArr"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/struct.Greater.html\" title=\"struct typenum::Greater\">Greater</a>","synthetic":true,"types":["typenum::Greater"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/struct.Less.html\" title=\"struct typenum::Less\">Less</a>","synthetic":true,"types":["typenum::Less"]},{"text":"impl Freeze for <a class=\"struct\" href=\"typenum/struct.Equal.html\" title=\"struct typenum::Equal\">Equal</a>","synthetic":true,"types":["typenum::Equal"]}];
implementors["uint"] = [{"text":"impl Freeze for <a class=\"enum\" href=\"uint/enum.FromStrRadixErrKind.html\" title=\"enum uint::FromStrRadixErrKind\">FromStrRadixErrKind</a>","synthetic":true,"types":["uint::uint::FromStrRadixErrKind"]},{"text":"impl Freeze for <a class=\"struct\" href=\"uint/struct.FromStrRadixErr.html\" title=\"struct uint::FromStrRadixErr\">FromStrRadixErr</a>","synthetic":true,"types":["uint::uint::FromStrRadixErr"]},{"text":"impl Freeze for <a class=\"enum\" href=\"uint/enum.FromDecStrErr.html\" title=\"enum uint::FromDecStrErr\">FromDecStrErr</a>","synthetic":true,"types":["uint::uint::FromDecStrErr"]},{"text":"impl Freeze for <a class=\"struct\" href=\"uint/struct.FromHexError.html\" title=\"struct uint::FromHexError\">FromHexError</a>","synthetic":true,"types":["uint::uint::FromHexError"]}];
implementors["wee_alloc"] = [{"text":"impl&lt;'a&gt; !Freeze for <a class=\"struct\" href=\"wee_alloc/struct.WeeAlloc.html\" title=\"struct wee_alloc::WeeAlloc\">WeeAlloc</a>&lt;'a&gt;","synthetic":true,"types":["wee_alloc::WeeAlloc"]}];
implementors["wyz"] = [{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtBinary.html\" title=\"struct wyz::fmt::FmtBinary\">FmtBinary</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtBinary"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtDisplay.html\" title=\"struct wyz::fmt::FmtDisplay\">FmtDisplay</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtDisplay"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtLowerExp.html\" title=\"struct wyz::fmt::FmtLowerExp\">FmtLowerExp</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtLowerExp"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtLowerHex.html\" title=\"struct wyz::fmt::FmtLowerHex\">FmtLowerHex</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtLowerHex"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtOctal.html\" title=\"struct wyz::fmt::FmtOctal\">FmtOctal</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtOctal"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtPointer.html\" title=\"struct wyz::fmt::FmtPointer\">FmtPointer</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtPointer"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtUpperExp.html\" title=\"struct wyz::fmt::FmtUpperExp\">FmtUpperExp</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtUpperExp"]},{"text":"impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"wyz/fmt/struct.FmtUpperHex.html\" title=\"struct wyz::fmt::FmtUpperHex\">FmtUpperHex</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["wyz::fmt::FmtUpperHex"]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for <a class=\"struct\" href=\"zeroize/struct.Zeroizing.html\" title=\"struct zeroize::Zeroizing\">Zeroizing</a>&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":["zeroize::Zeroizing"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()