initSidebarItems({"enum":[["DecodeError","Represents a problem with the data we want to decode."],["EncConfig","Configuration options for encoding. Just specifies whether or not output should be uppercase or lowercase."]],"fn":[["decode","Decode bytes from base16, and return a new `Vec<u8>` containing the results."],["decode_buf","Decode bytes from base16, and appends into the provided buffer. Only allocates if the buffer could not fit the data. Returns the number of bytes written."],["decode_byte","Decode a single character as hex."],["decode_slice","Decode bytes from base16, and write into the provided buffer. Never allocates."],["encode_byte","Encode a single character as hex, returning a tuple containing the two encoded bytes in big-endian order â€“ the order the characters would be in when written out (e.g. the top nibble is the first item in the tuple)"],["encode_byte_l","Convenience wrapper for `base16::encode_byte(byte, base16::EncodeLower)`"],["encode_byte_u","Convenience wrapper for `base16::encode_byte(byte, base16::EncodeUpper)`"],["encode_config","Encode `input` into a string using the listed config. The resulting string contains `input.len() * 2` bytes."],["encode_config_buf","Encode `input` into the end of the provided buffer. Returns the number of bytes that were written."],["encode_config_slice","Write bytes as base16 into the provided output buffer. Never allocates."],["encode_lower","Encode bytes as base16, using lower case characters for nibbles between 10 and 15 (`a` through `f`)."],["encode_upper","Encode bytes as base16, using upper case characters for nibbles between 10 and 15 (`A` through `F`)."]]});